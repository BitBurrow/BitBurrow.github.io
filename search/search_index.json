{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BitBurrow overview","text":""},{"location":"#note-this-software-does-not-exist-yet","title":"NOTE: THIS SOFTWARE DOES NOT EXIST YET","text":"<p>Everything below is proposed draft documentation. The software to do what is described is being developed and is not at all usable yet.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>BitBurrow is a set of tools to help you set up and use a VPN server anywhere--at your parents' house, an office, or a friend's apartment. And you don't have to be good with computers. A BitBurrow VPN server will allow you to securely use the internet from anywhere in the world as if you were at your \"VPN home\".</p> <p>If you just want to set up your own BitBurrow VPN server as described above, skip the rest of this page and go to How to set up a BitBurrow base.</p>"},{"location":"#technical-overview","title":"Technical overview","text":"<p>BitBurrow includes four main components:</p> <ul> <li>BitBurrow base is a router at your VPN home that functions as a VPN server. It accepts VPN connections from user devices and forwards them to the internet. See How to set up a BitBurrow base.</li> <li>BitBurrow app runs on Android or iOS and, together with the hub, is used to configure a BitBurrow base.</li> <li>BitBurrow hub runs on a server on the public internet. It serves to configure a BitBurrow base and also DNS requests from user devices. See How to set up a BitBurrow hub.</li> <li>BitBurrow outpost is a router configured as a VPN client, allowing users at a secondary location to use the internet as if they were at the \"VPN home\" without any additional software.</li> </ul> <p>Here is a visual representation.</p> <pre><code>%% live-view editor: https://mermaid.live/\n%% theme docs: https://mermaid.js.org/config/theming.html\n\n%% FIXME: when Material for MkDocs updates to Mermaid 10.1:\n%% * add Markdown titles, e.g.: base[\"`/fa:fa-network-wired BitBurrow **base**`\"\\]\n%% * add invisible links to attempt to order subgraphs, e.g.:: secondHome ~~~ vpnHome\n\nflowchart BT\n    %% flowchart docs: https://mermaid.js.org/syntax/flowchart.html\n    %% available icons: https://fontawesome.com/v5/search?o=r&amp;m=free\n    subgraph secondHome[\"&lt;b&gt;second home&lt;/b&gt;\"]\n        outpost[/\"&lt;img src='fa/network-wired.svg' width=16 height=16/&gt; BitBurrow &lt;b&gt;outpost&lt;/b&gt;\"\\]\n    end\n    subgraph coffeeShop[\"&lt;b&gt;coffee shop&lt;/b&gt;\"]\n        user1(\"&lt;img src='fa/laptop.svg' width=16 height=16/&gt; user device\")\n        user2(\"&lt;img src='fa/mobile-screen-button.svg' width=16 height=16/&gt; user device\")\n    end\n    subgraph vpnHome[\"&lt;b&gt;VPN home&lt;/b&gt;\"]\n        base[/\"&lt;img src='fa/network-wired.svg' width=16 height=16/&gt; BitBurrow &lt;b&gt;base&lt;/b&gt;\"\\]\n        %%click base href \"https://www.github.com\" \"BitBurrow base is ...\" _blank\n        app(\"&lt;img src='fa/mobile-screen-button.svg' width=16 height=16/&gt; BitBurrow &lt;b&gt;app&lt;/b&gt;\")\n    end\n    subgraph internet[\"&lt;b&gt;internet&lt;/b&gt;\"]\n        hub[\"&lt;img src='fa/server.svg' width=16 height=16/&gt; BitBurrow &lt;b&gt;hub&lt;/b&gt;\"]\n        resolver(&lt;img src='fa/server.svg' width=16 height=16/&gt; DNS resolver)\n        website[\"&lt;img src='fa/server.svg' width=16 height=16/&gt; website\"]\n    end\n    subgraph key[\"&lt;b&gt;key&lt;/b&gt;\"]\n        direction LR\n        A(\"&lt;img src='fa/laptop.svg' width=16 height=16/&gt;\")\n        B(\"&lt;img src='fa/server.svg' width=16 height=16/&gt;\")\n        C(\"&lt;img src='fa/laptop.svg' width=16 height=16/&gt;\")\n        D(\"&lt;img src='fa/server.svg' width=16 height=16/&gt;\")\n        E(\"&lt;img src='fa/laptop.svg' width=16 height=16/&gt;\")\n        F(\"&lt;img src='fa/server.svg' width=16 height=16/&gt;\")\n        G(\"&lt;img src='fa/laptop.svg' width=16 height=16/&gt;\")\n        H(\"&lt;img src='fa/server.svg' width=16 height=16/&gt;\")\n    end\n    %% http or https\n    A --&gt;|\"&lt;span style='background-color:#ededed'&gt;http/https&lt;/span&gt;\"| B\n    base ---&gt; website\n    base --&gt; hub\n    app &lt;--&gt; hub\n    linkStyle 0,1,2,3 stroke:purple\n    %% ssh or https\n    C --&gt;|\"&lt;span style='background-color:#ededed'&gt;ssh&lt;/span&gt;\"| D\n    app --&gt; base\n    linkStyle 4,5 stroke:red\n    %% WireGuard connections (add '=' for longer connections)\n    E ==&gt;|\"&lt;span style='background-color:#ededed'&gt;WireGuard&lt;/span&gt;\"| F\n    outpost ===&gt; base\n    user1 ===&gt; base\n    user2 ===&gt; base\n    base ===&gt; hub\n    %% DNS connections (add '.' for longer connections)\n    G -.-&gt;|\"&lt;span style='background-color:#ededed'&gt;vxm.example.org DNS&lt;/span&gt;\"| H\n    outpost -..-&gt; resolver\n    user1 -..-&gt; resolver\n    user2 -..-&gt; resolver\n    resolver -.-&gt; hub\n    %% styles\n    %%linkStyle default stroke:green\n    classDef highlight fill:#fff411,stroke-width:4px\n    %%class base highlight</code></pre>"},{"location":"#links","title":"Links","text":"<ul> <li>Source code for the BitBurrow hub</li> <li>Source code for the BitBurrow app</li> <li>Source code for this website</li> <li>BitBurrow website</li> </ul>"},{"location":"base/","title":"How to set up a BitBurrow base","text":""},{"location":"base/#note-this-software-does-not-exist-yet","title":"NOTE: THIS SOFTWARE DOES NOT EXIST YET","text":"<p>Everything below is proposed draft documentation. The software to do what is described is being developed and is not at all usable yet.</p>"},{"location":"base/#introduction","title":"Introduction","text":"<p>This page will help you set up a BitBurrow base. For an introduction, see BitBurrow overview.</p>"},{"location":"base/#what-you-will-need","title":"What you will need","text":"<ol> <li>A coupon code for a BitBurrow hub. If you do not have access to one, you can set up your own hub (this requires some computer experience) or ask your company or organization about doing this.</li> <li>A Flint router (GL.iNet GL-AX1800), available from GL.iNet and Amazon.com and WalMart and other locations.</li> <li>Permission to set up a new router at your \"VPN home\" location.</li> <li>If you plan to continue to use the existing router at your \"VPN home\", you will need the login password for this router.</li> <li>An Android phone or tablet which can be used at your \"VPN home\".</li> </ol>"},{"location":"base/#why-would-you-want-to-do-this","title":"Why would you want to do this","text":"<ol> <li>Restrictions. When you are on a commercial VPN, websites often add additional security checks or outright block service. When this happens, rarely is it clear why. A VPN via a residential or business location is not subject to these restrictions.</li> <li>Cost. Typically the cost of the VPN server hardware over its lifetime is much less than monthly VPN service fees. The existing internet connection is probably sufficient. The software is free.</li> <li>Trust. Many commercial VPN providers log VPN connections and online activities.</li> <li>Access. Banks, Netflix, and other sites will allow you to use their services as if you were at your \"VPN home\", even if you are physically in another country.</li> <li>Firewalls. WiFi at airports and coffee shops often blocks known VPN servers, but a non-commercial VPN is less likely to be blocked.</li> </ol>"},{"location":"base/#why-would-you-not-want-to-do-this","title":"Why would you not want to do this","text":"<ol> <li>Speed. Internet speed over the VPN will be limited by the devices at both ends, and also by the upload speed of the \"VPN home\" internet connection, since this will be used for downloading via the VPN.</li> <li>Reliability. If the power is out or a cable gets unplugged at the VPN server location, the VPN will be unavailable. If you depend on a VPN, have multiple options.</li> <li>Global servers. Commercial VPN providers usually have VPN servers in dozens of countries. With BitBurrow, you are limited to the servers you set up or friends invite you to use.</li> </ol>"},{"location":"base/#getting-started","title":"Getting started","text":"<ol> <li>Gather the items from the What you will need section.</li> <li>Install and run the BitBurrow app for Android on a device at the same location as the router. It is available from the Google Play Store or F-Droid.</li> </ol> <p>The BitBurrow app will walk you through the rest of the process. Here is a summary of that process.</p> <ol> <li>Scan your QR-code for the BitBurrow coupon or enter the information manually.</li> <li>You will be given a login key and be asked to write it down in a safe place.</li> <li>Plug in the new router and connect the Android device to its WiFi.</li> <li>If everything works as planned, BitBurrow will configure your router as a VPN server, prompting you if necessary. The process normally takes a few minutes.</li> <li>You can use the same BitBurrow app to add, edit, and delete VPN client devices (phones, laptops, other routers, etc.) to use the internet through your \"VPN home\" location.</li> </ol>"},{"location":"hub/","title":"How to set up a BitBurrow hub","text":""},{"location":"hub/#note-this-software-does-not-exist-yet","title":"NOTE: THIS SOFTWARE DOES NOT EXIST YET","text":"<p>Everything below is proposed draft documentation. The software to do what is described is being developed and is not at all usable yet.</p>"},{"location":"hub/#introduction","title":"Introduction","text":"<p>This page will help you set up a BitBurrow hub. For an introduction, see BitBurrow overview.</p>"},{"location":"hub/#what-you-will-need","title":"What you will need","text":"<ol> <li>Some background in Linux system administration and working on the command line.</li> <li>A Linux server with a fixed, public IPv4 address, e.g. from DigitalOcean, Linode, or other VPS provider. BitBurrow can share the server with other services so long as TCP ports 53 and 8443, and UDP port 53 are available.</li> <li>A domain or subdomain name with the ability to host your own DNS (i.e. add an NS record for the subdomain). The nameserver service provided by some domain name registrars does not allow adding NS records for subdomains. This was true of Hover as of March, 2023. To work around this, yuu will need to use a different nameserver service, such as DigitalOcean, for the entire domain.</li> <li>Time to manage a public server long-term.</li> </ol>"},{"location":"hub/#steps","title":"Steps","text":""},{"location":"hub/#acquire-a-domain-name","title":"Acquire a domain name","text":"<p>Purchase your new domain name from a domain name registrar such as Hover or Google Domains. Alternatively, create a new subdomain for an existing domain such as your company or organization. For example, if your organization owns <code>example.org</code>, you could set up <code>vxm.example.org</code> to use for BitBurrow, where <code>vxm</code> is a subdomain you choose.</p> <p>When choosing a domain name or subdomain, it is recommended that it not contain <code>vpn</code>, <code>proxy</code>, <code>bitburrow</code>, <code>gateway</code>, or similar words. Public WiFi networks that restrict VPN usage may block domain names that include these. Also, choosing a name that is easy to type will make it easier for admins setting up VPN servers.</p>"},{"location":"hub/#set-up-the-linux-server","title":"Set up the Linux server","text":"<p>These instructions are written for Ubuntu. If you are setting up a new server, use the most recent Ubuntu LTS server image.</p> <ol> <li>Sign in to the Linux server, preferably as a normal user with <code>sudo</code> privileges.</li> <li>Configure automatic security updates (more information):     <pre><code>sudo apt update\nsudo apt install unattended-upgrades\nsudo dpkg-reconfigure --priority=low unattended-upgrades  # choose Yes when prompted\n</code></pre></li> </ol>"},{"location":"hub/#create-a-container","title":"Create a container","text":"<p>This section is recommended but not required. A container helps with security by isolating BitBurrow hub from other applications running on the same server, provides a firewall from the internet, and allows the hub to run processes as root without actually being root. Additionally, to simplify the installation process below, you can run Ubuntu inside the container even if the host uses another Linux flavor.</p> <p>After these steps, you should have a command prompt in the container.</p> <ol> <li>Install LXD:     <pre><code>sudo snap install lxd\n</code></pre></li> <li>Initialize LXD--choose one of these lines; the first one will prompt you with options:     <pre><code>lxd init\nlxd init --auto --storage-backend=btrfs --storage-create-loop=10\n</code></pre></li> <li>Create a new container and connect to it:     <pre><code>VMNAME=bitburrow  # 'bitburrow' is the name of the new container (change it if you like)\nlxc launch ubuntu: $VMNAME\nlxc exec $VMNAME -- sudo -u ubuntu -i  # if this fails, wait 20 seconds and try again\n</code></pre></li> </ol>"},{"location":"hub/#install-bitburrow-hub","title":"Install BitBurrow hub","text":"<p>In the commands below, replace <code>vxm.example.org</code> with your BitBurrow hub domain name and replace <code>1.2.3.4</code> with the public IP address of your BitBurrow hub host machine. At the <code>BECOME password</code> prompt (after the <code>ansible-playbook</code> command), enter your <code>sudo</code> password, or just press enter if there isn't one, which is the default for <code>lxc</code>. In most cases, the <code>ansible-playbook</code> command will fail at <code>Test BIND and DNS config</code> the first time it is run. This is normal.</p> <ol> <li>Download the installer (run inside container):     <pre><code>rm -f preinstall.sh\nwget https://raw.githubusercontent.com/BitBurrow/BitBurrow/main/hub_installer/preinstall.sh\nsudo bash preinstall.sh\n</code></pre></li> <li>Run Ansible (run inside container; remember above-mentioned replacements):     <pre><code>cd ~/hub\nansible-playbook -i localhost, install.yaml --extra-vars \"domain=vxm.example.org ip=1.2.3.4\"\n</code></pre></li> <li>If the script fails with \"Missing sudo password\", run it again with <code>--ask-become-pass</code> before <code>install.yaml</code>.</li> <li>If the script fails for any other reason prior to the <code>Test BIND and DNS config</code> step, resolve whatever caused the failure (the <code>debugging</code> tips in <code>install.yaml</code> may be useful) and rerun the above <code>ansible-playbook</code> line</li> </ol>"},{"location":"hub/#forward-ports-to-the-container","title":"Forward ports to the container","text":"<p>Skip this section if you are not using a container.</p> <ol> <li>Type <code>exit</code> and enter to exit the container.</li> <li>Download and run the script generated above (run on host):     <pre><code>VMNAME=bitburrow  # use the same name you used for this above\nlxc file pull $VMNAME/home/bitburrow/set_port_forwarding.sh /tmp/set_port_forwarding.sh\n/tmp/set_port_forwarding.sh\n</code></pre></li> <li>The above should display several lines beginning <code>Device</code></li> <li>Connect to the container again (run on host):     <pre><code>lxc exec $VMNAME -- sudo -u ubuntu -i\n</code></pre></li> </ol>"},{"location":"hub/#make-bitburrow-hub-the-authoritative-name-server","title":"Make BitBurrow hub the authoritative name server","text":"<ol> <li>Do this only if you have a new subdomain of an existing domain for your organization or company. Configure the nameserver for <code>example.org</code> (usually done through the website of your domain name registrar) to have two additional records. Substitute <code>vxm.example.org</code> with your domain. First, add an NS record (short for name server) for <code>vxm.example.org</code> which points to <code>vxm.example.org</code>. This tells the internet that <code>vxm.example.org</code> (your BitBurrow hub) is the authoritative nameserver for all of it's subdomains, e.g. <code>foxes.vxm.example.org</code>. Use the default TTL value. Second, add an A record for <code>vxm.example.org</code> which points to the IP address of your host. This is called a \"glue record\" (more info). Here is a partial zone file for <code>example.org</code> which represents these two records:     <pre><code>vxm.example.org. 86400 IN NS vxm.example.org.\nvxm.example.org. 3600 IN A 1.2.3.4\n</code></pre></li> <li>Do this only if you have a domain exclusively for BitBurrow hub. Configure <code>example.org</code> (usually done through the website of your domain name registrar) to have it's NS (name server) records point to the IP address of your BitBurrow hub. This tells the internet that <code>example.org</code> (your BitBurrow hub) is the authoritative nameserver for all of it's subdomains, e.g. <code>foxes.example.org</code>.</li> </ol>"},{"location":"hub/#finish-installing-bitburrow-hub","title":"Finish installing BitBurrow hub","text":"<ol> <li>Run Ansible again (run inside container):     <pre><code>cd ~/hub\nansible-playbook -i localhost, install.yaml\n</code></pre></li> <li>If the script fails with \"Missing sudo password\", run it again with <code>--ask-become-pass</code> before <code>install.yaml</code>.</li> <li>If the script fails for another reason, resolve whatever caused the failure (the <code>debugging</code> tips in <code>install.yaml</code> may be useful) and rerun the above <code>ansible-playbook</code> line</li> </ol>"},{"location":"hub/#configure-ssh-directly-to-container-optional","title":"Configure ssh directly to container (optional)","text":"<p>In the steps below, replace <code>vxm.example.org</code> with your BitBurrow hub domain and <code>18962</code> with a port number of your choosing.</p> <p>This assumes <code>authorized_keys</code> on the host is already configured for public-key ssh authentication.</p> <ol> <li>Set up ssh to container (run on host):     <pre><code>VMNAME=bitburrow\nlxc exec $VMNAME -- apt install -y ssh\ncat ~/.ssh/authorized_keys |lxc exec $VMNAME -- sudo -u ubuntu bash -c 'cd; mkdir -p .ssh; cat - &gt;&gt; ~/.ssh/authorized_keys; chmod go-w . .ssh; chmod ugo-x,go-w .ssh/authorized_keys'\nlxc config device add $VMNAME ssh proxy listen=tcp:0.0.0.0:18962 connect=tcp:127.0.0.1:22\n</code></pre></li> <li>On your personal computer, edit <code>~/.ssh/config</code> and add:     <pre><code>Host bitburrow\n    HostName vxm.example.org\n    Port 18962\n    User ubuntu\n</code></pre></li> </ol>"},{"location":"hub/#create-a-bitburrow-hub-administrator-account-and-coupon-code","title":"Create a BitBurrow hub administrator account and coupon code","text":"<ol> <li>Add the admin account (run inside container):     <pre><code>sudo -u bitburrow /home/bitburrow/bitburrow/.venv/bin/bbhub --create-admin-account\n</code></pre></li> <li>Write down this login key in a safe place. It is effectively the master username and password for this BitBurrow hub.</li> <li>Create a coupon code (run inside container):     <pre><code>sudo -u bitburrow /home/bitburrow/bitburrow/.venv/bin/bbhub --create-coupon-code\n</code></pre></li> <li>Write down this coupon. It is what you will distribute to others to set up their own VPN server.</li> </ol>"},{"location":"hub/#restart-the-container-and-test","title":"Restart the container and test","text":"<ol> <li>Reboot (run inside the container):     <pre><code>sudo reboot\n</code></pre></li> <li>Test a connection from the client app</li> </ol>"}]}